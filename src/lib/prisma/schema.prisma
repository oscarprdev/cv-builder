generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType      = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

enum ResumeTheme {
  DEFAULT
  HARVARD
}

model User {
  id       String   @id @unique @default(uuid())
  password String
  email    String   @unique
  resumes  Resume[]
}

model Resume {
  id             String                        @id @unique @default(uuid())
  userId         String
  user           User                          @relation(fields: [userId], references: [id])
  basicInfo      ResumeBasicInformation?       @relation()
  summaryInfo    ResumeSummaryInformation?     @relation()
  experienceInfo ResumeExperienceInformation[] @relation()
  resumeMeta     ResumeMeta?                   @relation()
}

model ResumeMeta {
  id        String      @id @unique @default(uuid())
  resumeId  String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  theme     ResumeTheme
  resume    Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeBasicInformation {
  id           String                    @id @unique @default(uuid())
  resumeId     String                    @unique
  fullName     String
  headline     String
  email        String
  website      String
  phone        String
  location     String
  imageUrl     String?
  resume       Resume?                   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  customFields ResumeBasicCustomFields[]
}

model ResumeBasicCustomFields {
  id                     String                 @id @unique @default(uuid())
  basicInfoId            String
  label                  String
  href                   String
  ResumeBasicInformation ResumeBasicInformation @relation(fields: [basicInfoId], references: [id])
}

model ResumeSummaryInformation {
  id       String  @id @unique @default(uuid())
  resumeId String  @unique
  summary  String
  resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeExperienceInformation {
  id          String  @id @unique @default(uuid())
  resumeId    String
  company     String
  role        String
  description String
  startDate   String
  endDate     String
  website     String
  sortOrder   Int     @default(autoincrement())
  resume      Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

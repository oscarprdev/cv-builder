generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType      = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id       String   @id @unique @default(uuid())
  password String
  email    String   @unique
  resumes  Resume[]
}

model Resume {
  id             String                        @id @unique @default(uuid())
  userId         String
  user           User                          @relation(fields: [userId], references: [id])
  basicInfo      ResumeBasicInformation?
  educationInfo  ResumeEducationInformation[]
  experienceInfo ResumeExperienceInformation[]
  languageInfo   ResumeLanguageInformation[]
  resumeMeta     ResumeMeta?
  skillInfo      ResumeSkillInformation[]
  summaryInfo    ResumeSummaryInformation?
}

model ResumeMeta {
  id              String      @id @unique @default(uuid())
  resumeId        String      @unique
  createdAt       DateTime    @default(now())
  theme           ResumeTheme
  updatedAt       DateTime    @default(now())
  isPublic        Boolean     @default(false)
  educationTitle  String      @default("Education")
  experienceTitle String      @default("Experience")
  languagesTitle  String      @default("Languages")
  skillsTitle     String      @default("Skills")
  summaryTitle    String      @default("Summary")
  resume          Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeBasicInformation {
  id            String                    @id @unique @default(uuid())
  resumeId      String                    @unique
  fullName      String
  headline      String
  email         String
  website       String
  phone         String
  location      String
  imageUrl      String?
  imageDisabled Boolean                   @default(false)
  customFields  ResumeBasicCustomFields[]
  resume        Resume                    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeBasicCustomFields {
  id                     String                 @id @unique @default(uuid())
  basicInfoId            String
  label                  String
  href                   String
  ResumeBasicInformation ResumeBasicInformation @relation(fields: [basicInfoId], references: [id])
}

model ResumeSummaryInformation {
  id       String @id @unique @default(uuid())
  resumeId String @unique
  summary  String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeExperienceInformation {
  id          String @id @unique @default(uuid())
  description String
  startDate   String
  endDate     String
  company     String
  website     String
  resumeId    String
  role        String
  sortOrder   Int    @default(autoincrement())
  resume      Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeEducationInformation {
  id          String @id @unique @default(uuid())
  resumeId    String
  institution String
  study       String
  description String
  startDate   String
  endDate     String
  sortOrder   Int    @default(autoincrement())
  resume      Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeSkillInformation {
  id        String @id @unique @default(uuid())
  resumeId  String
  name      String
  level     Int
  sortOrder Int    @default(autoincrement())
  resume    Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeLanguageInformation {
  id               String        @id @unique @default(uuid())
  resumeId         String
  language         String
  sortOrder        Int           @default(autoincrement())
  level            LanguageLevel
  certificationUrl String?
  resume           Resume        @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

enum ResumeTheme {
  DEFAULT
  HARVARD
}

enum LanguageLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NATIVE
}
